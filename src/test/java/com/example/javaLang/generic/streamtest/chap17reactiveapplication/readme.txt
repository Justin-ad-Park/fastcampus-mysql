리액티브 프로그래밍의 주요 기능은 비동기로 작업을 수행할 수 있다는 점이다.

이벤트 스트림을 블록하지 않고, 비동기로 처리하는 것이 멀티코어 CPU의 사용률을 극대화
(엄밀하게는 내부적으로 경쟁하는 CPU의 스레드 사용률)할 수 있는 방법이다.

리액티브 프레임워크와 라이브러리는
스레드(상대적으로 비싼 자원)를
    퓨처, 액터, 일련의 콜백을 발생시키는 이벤트 루프 등과 공유하고 처리할 이벤트를 변환하고
관리한다.

이들 기술은 스레드보다 가벼울 뿐 아니라 개발자에게 큰 이득을 제공한다.
    비동기 애플리케이션 구현의 추상 수준을 높일 수 있다.
    구체적으로 동기 블록, 경쟁 조건, 데드락 같은 저 수준의 멀티스레드 문제를 직접 처리할 필요가 없어지면서
    비즈니스 요구사항을 구현하는데 더 집중할 수 있다.

   스레드를 다시 쪼개는 종류의 기술을 이용할 때는 메인 이벤트 루프 안에서는 절대 동작을 블럭하지 않아야 한다는
   중요한 전제 조건이 항상 따른다.
   데이터베이스나 파일 시스템, API(원격호출)의 접근 등 작업 완료까지 얼마나 걸리지 예측이 힘든 작업이 블록 작업에 속한다.

   CPU 사용률을 극대화하려면 이러한 블록 작업을 회피해야 한다.


[리액티브 매니패스토]
리액티브 애플리케이션과 리액티브 시스템 개발의 핵심 원리를 공식적으로 정의한 것.

반응성(responsive) - 일정하고 예상할 수 있는 반응 시간을 제공.
회복성(resilient) - 장애가 발생해도 시스템은 반응해야 한다.
    컴포넌트의 복제
    컴포넌트의 시간(발신자와 수신자가 독립적인 생명 주기를 가짐)과 공간(발송자와 수신자가 다른 프로세스에서 실행됨)의 분리
    각 컴포넌트가 비동기적으로 작업을 다른 컴포넌트에 위임
  하는 등 리액티브 매니페스토는 회복성을 달성할 수 있는 다양한 기법을 제시한다.
탄력성(Elastic) - 작업 부하가 발생하면 자동으로 관련 컴포넌트에 할당된 자원을 늘리거나 또는 컴포넌트 자체를 병렬로 확장한다.
메시지 주도(Message-driven) - 약한 결합, 고립, 위치 투명성 등을 지원할 수 있도록 시스템을 구성하는 컴포넌트의 경계를 명확하게 정의해야 한다.
    비동기 메시지를 전달해 컴포넌트 끼리의 통신이 이루어진다.
    이 덕분에 회복성(장애를 메시지로 처리)과 탄력성(주고 받는 메시지 수를 감시하고 메시지 양에 따라 적절하게 리소스를 할당)을 얻을 수 있다.


[리액티스 시스템]
    메시지 -> 정의된 목적지 하나를 향함
    이벤트 -> 이벤트를 관찰하도록 등록한 컴포넌트가 수신. 다수의 컴포넌트가 이벤트를 관찰할 수도 있음

리액티브 시스템에서는 수신자와 발신자가 각각 수신 메시지, 발신 메시지와 결합하지 않도록 이들 메시지를 비동기로 처리해야 한다.
각 컴포넌트(수신자, 발신자)를 완전히 고립하려면 이들이 결합되지 않도록 해야 하며,
그래야만 시스템이 장애(회복성)와 높은 부하(탄력성)에서도 반응성을 유지할 수 있다.

{회복성}
리액티브 아키텍처에서는 컴포넌트에서 발생한 장애를 고립시켜 장애가 주변의 다른 컴포넌트로 전파되지 않도록 막는다.
컴포넌트의 장애를 고립시켜 전체 시스템 장애로 이어지는 것을 막는 것은 시스템 전체의 회복성을 제공한다.
시스템에서 장애가 발생했을 때 서서히 성능이 저하되는 것이 아니라 문제를 격리함으로 장애에서 완전 복구되어 건강한 상태로 시스템이 돌아온다.
이런 '마법'은 에러 전파를 방지하고 이들을 메시지로 바꾸어 다른 컴포넌트로 보내는 등 감독자 역할을 수행함으로 이루어진다.

{확장성-탄력성}
고립과 비결합이 회복성의 핵심이라면 탄련성의 핵심은 위치 투명성이다.
위치 투명성은 리액티브 시스템의 모든 컴포넌트가 수신자의 위치에 상관없이 다른 모든 서비스와 통신할 수 있음을 의미한다.
위치 투명성 덕분에 시스템을 복제할 수 있으며, 현재 작업 부하에 따라 (자동으로) 애플리케이션을 확장할 수 있다.

위치를 따지지 않는 확장성은 리액티브 애플리케이션(시간에 기반한 비동기, 동시적, 비결합 - 비동기로 개발된 어플리케이션)과
리액티브 시스템(위치 투명성을 통한 공간적 비결합 - 분산 처리를 지원하는 시스템 - Istio, Spring Cloud, K8s(ALB, Ingress...)의
차이를 보여준다.


리액티브 스트림 프로젝트(www.reactive-streams.org 넥플릭스, 레드햇, 트워터, 라이트벤드 등이 참여)에서
모든 리액티브 스트림 구현이 제공해야 하는 최소 기능 집합을 네 개의 관련 인터페이스로 정의했다.
자바9의 새로운 java.util.concurrent.Flow 클래스,
RxJava(넷플릭스), Akka 스트림(라이트벤드), 리액터(피보탈), Vert.x(래드햇) 등 많은 서드 파티 라이브러리에서
이들 인터페이스르 구현한다.




